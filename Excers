
                                                                                                  TA 7 c) 



let rec reverse a c = 
  if a < 1 then c 
  else reverse (a/10) (c*10 + a mod 10 ) ;;
  

let isPalindrome b = reverse b 0 = b ;; 

isPalindrome 1221


                                                                                                   TA 7 d)

let effPower x n m =
                let rec effPower' x n  a = 
                    if n = 0 then a mod m else effPower' (x) (n-1)  (a mod m *x) 
                in effPower'  (x mod m) n  1

                                                                                                  E0 11.
                                                                                             

let rec check (x: int) : bool =
  if x = 0 then true else
    let y = square x in
    let z = square' x in
    if y = z then check (x - 1) else false


TB5 a) 


let vip a = let rec foo a n = if a mod 2 = 0 then foo (a/2) (n+1)
  else if a mod 2 = 1 && a != 1 then foo (3*a + 1 ) (n+1)
  else n + 1 in 
  foo a 0;;

TB6 a) 

let abs a  = if a >= 0 then a else -a ;;
let max (a,b) = if a>= b then a else b ;; 

let rec lardigit a n = if (abs a) < 10 then max(abs a,n)
  else let n = if ((abs a) mod 10) >= n then (abs a) mod 10 else n in
  lardigit ((abs a)/10) n ;; 

Tb 6 b, 

let sumvip n =
  let rec sum n a = 
   if n  <= 0 then if a > 10 then sum a 0 else a 
   else sum (n/10) ( a + (n mod 10));
   in sum n 0 ;; 
   


